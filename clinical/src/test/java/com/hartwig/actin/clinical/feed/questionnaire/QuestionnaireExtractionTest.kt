package com.hartwig.actin.clinical.feed.questionnaire

import com.hartwig.actin.clinical.datamodel.TumorStage
import com.hartwig.actin.clinical.feed.questionnaire.QuestionnaireExtraction.Companion.isActualQuestionnaire
import org.junit.Assert
import org.junit.Test
import java.time.LocalDate

class QuestionnaireExtractionTest {
    @Test
    fun shouldBeAbleToDetermineThatQuestionnaireEntryIsAQuestionnaire() {
        Assert.assertTrue(isActualQuestionnaire(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV1_5())))
        Assert.assertTrue(isActualQuestionnaire(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV1_4())))
        Assert.assertTrue(isActualQuestionnaire(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV1_3())))
        Assert.assertTrue(isActualQuestionnaire(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV1_2())))
        Assert.assertTrue(isActualQuestionnaire(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV1_1())))
        Assert.assertTrue(isActualQuestionnaire(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV1_0())))
        Assert.assertTrue(isActualQuestionnaire(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV0_2())))
        Assert.assertTrue(isActualQuestionnaire(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV0_1())))
        Assert.assertFalse(isActualQuestionnaire(entry("Does not exist")))
    }

    @Test
    fun shouldBeAbleToHandleMissingGENAYASubjectNumberFromQuestionnaire() {
        val entryWithMissingSubjectNumber =
            entry(TestQuestionnaireFactory.createTestQuestionnaireValueV1_6().replace("GENAYA subjectno: GAYA-01-02-9999", ""))
        val questionnaire = extraction().extract(entryWithMissingSubjectNumber)
        Assert.assertNull(questionnaire!!.genayaSubjectNumber())
    }

    @Test
    fun shouldBeAbleToExtractDataFromQuestionnaireV1_6() {
        val questionnaire = extraction().extract(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV1_6()))
        Assert.assertEquals(LocalDate.of(2020, 8, 28), questionnaire!!.date())
        Assert.assertEquals("ovary", questionnaire.tumorLocation())
        Assert.assertEquals("serous", questionnaire.tumorType())
        Assert.assertEquals("lymph node", questionnaire.biopsyLocation())
        val treatmentHistory = questionnaire.treatmentHistoryCurrentTumor()
        Assert.assertEquals(2, treatmentHistory!!.size.toLong())
        Assert.assertTrue(treatmentHistory.contains("cisplatin"))
        Assert.assertTrue(treatmentHistory.contains("nivolumab"))
        val otherOncologicalHistory = questionnaire.otherOncologicalHistory()
        Assert.assertEquals(1, otherOncologicalHistory!!.size.toLong())
        Assert.assertTrue(otherOncologicalHistory.contains("surgery"))
        val secondaryPrimaries = questionnaire.secondaryPrimaries()
        Assert.assertEquals(1, secondaryPrimaries!!.size.toLong())
        Assert.assertTrue(secondaryPrimaries.contains("sarcoma | Feb 2020"))
        val nonOncologicalHistory = questionnaire.nonOncologicalHistory()
        Assert.assertEquals(1, nonOncologicalHistory!!.size.toLong())
        Assert.assertTrue(nonOncologicalHistory.contains("diabetes"))
        Assert.assertEquals(TumorStage.IV, questionnaire.stage())
        Assert.assertTrue(questionnaire.hasMeasurableDisease()!!)
        Assert.assertTrue(questionnaire.hasBrainLesions()!!)
        Assert.assertTrue(questionnaire.hasActiveBrainLesions()!!)
        Assert.assertNull(questionnaire.hasCnsLesions())
        Assert.assertNull(questionnaire.hasActiveCnsLesions())
        Assert.assertFalse(questionnaire.hasBoneLesions()!!)
        Assert.assertFalse(questionnaire.hasLiverLesions()!!)
        val otherLesions = questionnaire.otherLesions()
        Assert.assertEquals(2, otherLesions!!.size.toLong())
        Assert.assertTrue(otherLesions.contains("pulmonal"))
        Assert.assertTrue(otherLesions.contains("abdominal"))
        val ihcTestResults = questionnaire.ihcTestResults()
        Assert.assertEquals(1, ihcTestResults!!.size.toLong())
        Assert.assertTrue(ihcTestResults.contains("ERBB2 3+"))
        val pdl1TestResults = questionnaire.pdl1TestResults()
        Assert.assertEquals(1, pdl1TestResults!!.size.toLong())
        Assert.assertTrue(pdl1TestResults.contains("Positive"))
        Assert.assertEquals(0, (questionnaire.whoStatus() as Int).toLong())
        val unresolvedToxicities = questionnaire.unresolvedToxicities()
        Assert.assertEquals(1, unresolvedToxicities!!.size.toLong())
        Assert.assertTrue(unresolvedToxicities.contains("toxic"))
        val infectionStatus = questionnaire.infectionStatus()
        Assert.assertNotNull(infectionStatus)
        Assert.assertFalse(infectionStatus!!.hasActiveInfection())
        val ecg = questionnaire.ecg()
        Assert.assertNotNull(ecg)
        Assert.assertTrue(ecg!!.hasSigAberrationLatestECG())
        Assert.assertEquals("Sinus", ecg.aberrationDescription())
        val complications = questionnaire.complications()
        Assert.assertEquals(1, complications!!.size.toLong())
        Assert.assertTrue(complications.contains("vomit"))
        Assert.assertEquals("GAYA-01-02-9999", questionnaire.genayaSubjectNumber())
    }

    @Test
    fun shouldBeAbleToExtractDataFromQuestionnaireV1_5() {
        assertExtractionForQuestionnaireV1_5(TestQuestionnaireFactory.createTestQuestionnaireValueV1_5())
    }

    @Test
    fun shouldBeAbleToExtractDataFromAlternateQuestionnaireV1_5() {
        val rawQuestionnaire = TestQuestionnaireFactory.createTestQuestionnaireValueV1_5()
            .replace("- IHC test", "-IHC test")
            .replace("- PD L1 test", "-PD L1 test")
        assertExtractionForQuestionnaireV1_5(rawQuestionnaire)
    }

    private fun assertExtractionForQuestionnaireV1_5(rawQuestionnaire: String) {
        val questionnaire = extraction().extract(entry(rawQuestionnaire))
        Assert.assertEquals(LocalDate.of(2020, 8, 28), questionnaire!!.date())
        Assert.assertEquals("ovary", questionnaire.tumorLocation())
        Assert.assertEquals("serous", questionnaire.tumorType())
        Assert.assertEquals("lymph node", questionnaire.biopsyLocation())
        val treatmentHistory = questionnaire.treatmentHistoryCurrentTumor()
        Assert.assertEquals(2, treatmentHistory!!.size.toLong())
        Assert.assertTrue(treatmentHistory.contains("cisplatin"))
        Assert.assertTrue(treatmentHistory.contains("nivolumab"))
        val otherOncologicalHistory = questionnaire.otherOncologicalHistory()
        Assert.assertEquals(1, otherOncologicalHistory!!.size.toLong())
        Assert.assertTrue(otherOncologicalHistory.contains("surgery"))
        val secondaryPrimaries = questionnaire.secondaryPrimaries()
        Assert.assertEquals(1, secondaryPrimaries!!.size.toLong())
        Assert.assertTrue(secondaryPrimaries.contains("sarcoma | Feb 2020"))
        val nonOncologicalHistory = questionnaire.nonOncologicalHistory()
        Assert.assertEquals(1, nonOncologicalHistory!!.size.toLong())
        Assert.assertTrue(nonOncologicalHistory.contains("diabetes"))
        Assert.assertEquals(TumorStage.IV, questionnaire.stage())
        Assert.assertTrue(questionnaire.hasMeasurableDisease()!!)
        Assert.assertTrue(questionnaire.hasBrainLesions()!!)
        Assert.assertTrue(questionnaire.hasActiveBrainLesions()!!)
        Assert.assertNull(questionnaire.hasCnsLesions())
        Assert.assertNull(questionnaire.hasActiveCnsLesions())
        Assert.assertFalse(questionnaire.hasBoneLesions()!!)
        Assert.assertFalse(questionnaire.hasLiverLesions()!!)
        val otherLesions = questionnaire.otherLesions()
        Assert.assertEquals(2, otherLesions!!.size.toLong())
        Assert.assertTrue(otherLesions.contains("pulmonal"))
        Assert.assertTrue(otherLesions.contains("abdominal"))
        val ihcTestResults = questionnaire.ihcTestResults()
        Assert.assertEquals(1, ihcTestResults!!.size.toLong())
        Assert.assertTrue(ihcTestResults.contains("ERBB2 3+"))
        val pdl1TestResults = questionnaire.pdl1TestResults()
        Assert.assertEquals(1, pdl1TestResults!!.size.toLong())
        Assert.assertTrue(pdl1TestResults.contains("Positive"))
        Assert.assertEquals(0, (questionnaire.whoStatus() as Int).toLong())
        val unresolvedToxicities = questionnaire.unresolvedToxicities()
        Assert.assertEquals(1, unresolvedToxicities!!.size.toLong())
        Assert.assertTrue(unresolvedToxicities.contains("toxic"))
        val infectionStatus = questionnaire.infectionStatus()
        Assert.assertNotNull(infectionStatus)
        Assert.assertFalse(infectionStatus!!.hasActiveInfection())
        val ecg = questionnaire.ecg()
        Assert.assertNotNull(ecg)
        Assert.assertTrue(ecg!!.hasSigAberrationLatestECG())
        Assert.assertEquals("Sinus", ecg.aberrationDescription())
        val complications = questionnaire.complications()
        Assert.assertEquals(1, complications!!.size.toLong())
        Assert.assertTrue(complications.contains("vomit"))
        Assert.assertNull(questionnaire.genayaSubjectNumber())
    }

    @Test
    fun shouldBeAbleToExtractDataFromQuestionnaireV1_4() {
        val questionnaire = extraction().extract(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV1_4()))
        Assert.assertEquals(LocalDate.of(2020, 8, 28), questionnaire!!.date())
        Assert.assertEquals("ovary", questionnaire.tumorLocation())
        Assert.assertEquals("serous", questionnaire.tumorType())
        Assert.assertEquals("Lymph node", questionnaire.biopsyLocation())
        val treatmentHistory = questionnaire.treatmentHistoryCurrentTumor()
        Assert.assertEquals(2, treatmentHistory!!.size.toLong())
        Assert.assertTrue(treatmentHistory.contains("cisplatin"))
        Assert.assertTrue(treatmentHistory.contains("nivolumab"))
        val otherOncologicalHistory = questionnaire.otherOncologicalHistory()
        Assert.assertEquals(1, otherOncologicalHistory!!.size.toLong())
        Assert.assertTrue(otherOncologicalHistory.contains("surgery"))
        Assert.assertNull(questionnaire.secondaryPrimaries())
        val nonOncologicalHistory = questionnaire.nonOncologicalHistory()
        Assert.assertEquals(1, nonOncologicalHistory!!.size.toLong())
        Assert.assertTrue(nonOncologicalHistory.contains("diabetes"))
        Assert.assertEquals(TumorStage.III, questionnaire.stage())
        Assert.assertTrue(questionnaire.hasMeasurableDisease()!!)
        Assert.assertNull(questionnaire.hasBrainLesions())
        Assert.assertNull(questionnaire.hasActiveBrainLesions())
        Assert.assertNull(questionnaire.hasCnsLesions())
        Assert.assertNull(questionnaire.hasActiveCnsLesions())
        Assert.assertFalse(questionnaire.hasBoneLesions()!!)
        Assert.assertFalse(questionnaire.hasLiverLesions()!!)
        val otherLesions = questionnaire.otherLesions()
        Assert.assertEquals(1, otherLesions!!.size.toLong())
        Assert.assertTrue(otherLesions.contains("pulmonal"))
        val ihcTestResults = questionnaire.ihcTestResults()
        Assert.assertEquals(1, ihcTestResults!!.size.toLong())
        Assert.assertTrue(ihcTestResults.contains("IHC ERBB2 3+"))
        Assert.assertNull(questionnaire.pdl1TestResults())
        Assert.assertEquals(0, (questionnaire.whoStatus() as Int).toLong())
        Assert.assertNull(questionnaire.unresolvedToxicities())
        val infectionStatus = questionnaire.infectionStatus()
        Assert.assertNotNull(infectionStatus)
        Assert.assertFalse(infectionStatus!!.hasActiveInfection())
        val ecg = questionnaire.ecg()
        Assert.assertNotNull(ecg)
        Assert.assertTrue(ecg!!.hasSigAberrationLatestECG())
        Assert.assertEquals("Sinus", ecg.aberrationDescription())
        val complications = questionnaire.complications()
        Assert.assertEquals(1, complications!!.size.toLong())
        Assert.assertTrue(complications.contains("nausea"))
        Assert.assertNull(questionnaire.genayaSubjectNumber())
    }

    @Test
    fun shouldBeAbleToExtractDataFromQuestionnaireV1_3() {
        val questionnaire = extraction().extract(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV1_3()))
        Assert.assertEquals(LocalDate.of(2020, 8, 28), questionnaire!!.date())
        Assert.assertEquals("ovary", questionnaire.tumorLocation())
        Assert.assertEquals("serous", questionnaire.tumorType())
        Assert.assertEquals("Lymph node", questionnaire.biopsyLocation())
        val treatmentHistory = questionnaire.treatmentHistoryCurrentTumor()
        Assert.assertEquals(2, treatmentHistory!!.size.toLong())
        Assert.assertTrue(treatmentHistory.contains("cisplatin"))
        Assert.assertTrue(treatmentHistory.contains("nivolumab"))
        val otherOncologicalHistory = questionnaire.otherOncologicalHistory()
        Assert.assertEquals(1, otherOncologicalHistory!!.size.toLong())
        Assert.assertTrue(otherOncologicalHistory.contains("surgery"))
        Assert.assertNull(questionnaire.secondaryPrimaries())
        val nonOncologicalHistory = questionnaire.nonOncologicalHistory()
        Assert.assertEquals(1, nonOncologicalHistory!!.size.toLong())
        Assert.assertTrue(nonOncologicalHistory.contains("diabetes"))
        Assert.assertEquals(TumorStage.III, questionnaire.stage())
        Assert.assertTrue(questionnaire.hasMeasurableDisease()!!)
        Assert.assertNull(questionnaire.hasBrainLesions())
        Assert.assertNull(questionnaire.hasActiveBrainLesions())
        Assert.assertNull(questionnaire.hasCnsLesions())
        Assert.assertNull(questionnaire.hasActiveCnsLesions())
        Assert.assertFalse(questionnaire.hasBoneLesions()!!)
        Assert.assertFalse(questionnaire.hasLiverLesions()!!)
        val otherLesions = questionnaire.otherLesions()
        Assert.assertEquals(1, otherLesions!!.size.toLong())
        Assert.assertTrue(otherLesions.contains("pulmonal"))
        Assert.assertNull(questionnaire.ihcTestResults())
        Assert.assertNull(questionnaire.pdl1TestResults())
        Assert.assertEquals(0, (questionnaire.whoStatus() as Int).toLong())
        Assert.assertNull(questionnaire.unresolvedToxicities())
        val infectionStatus = questionnaire.infectionStatus()
        Assert.assertNotNull(infectionStatus)
        Assert.assertFalse(infectionStatus!!.hasActiveInfection())
        val ecg = questionnaire.ecg()
        Assert.assertNotNull(ecg)
        Assert.assertTrue(ecg!!.hasSigAberrationLatestECG())
        Assert.assertEquals("Sinus", ecg.aberrationDescription())
        val complications = questionnaire.complications()
        Assert.assertEquals(1, complications!!.size.toLong())
        Assert.assertTrue(complications.contains("nausea"))
        Assert.assertNull(questionnaire.genayaSubjectNumber())
    }

    @Test
    fun shouldBeAbleToExtractDataFromQuestionnaireV1_2() {
        val questionnaire = extraction().extract(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV1_2()))
        Assert.assertEquals(LocalDate.of(2020, 8, 28), questionnaire!!.date())
        Assert.assertEquals("ovary", questionnaire.tumorLocation())
        Assert.assertEquals("serous", questionnaire.tumorType())
        Assert.assertEquals("Lymph node", questionnaire.biopsyLocation())
        val treatmentHistory = questionnaire.treatmentHistoryCurrentTumor()
        Assert.assertEquals(2, treatmentHistory!!.size.toLong())
        Assert.assertTrue(treatmentHistory.contains("cisplatin"))
        Assert.assertTrue(treatmentHistory.contains("nivolumab"))
        val otherOncologicalHistory = questionnaire.otherOncologicalHistory()
        Assert.assertEquals(1, otherOncologicalHistory!!.size.toLong())
        Assert.assertTrue(otherOncologicalHistory.contains("surgery"))
        Assert.assertNull(questionnaire.secondaryPrimaries())
        val nonOncologicalHistory = questionnaire.nonOncologicalHistory()
        Assert.assertEquals(1, nonOncologicalHistory!!.size.toLong())
        Assert.assertTrue(nonOncologicalHistory.contains("diabetes"))
        Assert.assertEquals(TumorStage.III, questionnaire.stage())
        Assert.assertTrue(questionnaire.hasMeasurableDisease()!!)
        Assert.assertNull(questionnaire.hasBrainLesions())
        Assert.assertNull(questionnaire.hasActiveBrainLesions())
        Assert.assertNull(questionnaire.hasCnsLesions())
        Assert.assertNull(questionnaire.hasActiveCnsLesions())
        Assert.assertFalse(questionnaire.hasBoneLesions()!!)
        Assert.assertFalse(questionnaire.hasLiverLesions()!!)
        val otherLesions = questionnaire.otherLesions()
        Assert.assertEquals(1, otherLesions!!.size.toLong())
        Assert.assertTrue(otherLesions.contains("pulmonal"))
        Assert.assertNull(questionnaire.ihcTestResults())
        Assert.assertNull(questionnaire.pdl1TestResults())
        Assert.assertEquals(0, (questionnaire.whoStatus() as Int).toLong())
        Assert.assertNull(questionnaire.unresolvedToxicities())
        val infectionStatus = questionnaire.infectionStatus()
        Assert.assertNotNull(infectionStatus)
        Assert.assertFalse(infectionStatus!!.hasActiveInfection())
        val ecg = questionnaire.ecg()
        Assert.assertNotNull(ecg)
        Assert.assertTrue(ecg!!.hasSigAberrationLatestECG())
        Assert.assertEquals("Sinus", ecg.aberrationDescription())
        val complications = questionnaire.complications()
        Assert.assertEquals(1, complications!!.size.toLong())
        Assert.assertTrue(complications.contains("nausea"))
        Assert.assertNull(questionnaire.genayaSubjectNumber())
    }

    @Test
    fun shouldBeAbleToExtractDataFromQuestionnaireV1_1() {
        val questionnaire = extraction().extract(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV1_1()))
        Assert.assertEquals(LocalDate.of(2020, 8, 28), questionnaire!!.date())
        Assert.assertEquals("ovary", questionnaire.tumorLocation())
        Assert.assertEquals("serous", questionnaire.tumorType())
        Assert.assertEquals("Lymph node", questionnaire.biopsyLocation())
        val treatmentHistory = questionnaire.treatmentHistoryCurrentTumor()
        Assert.assertEquals(2, treatmentHistory!!.size.toLong())
        Assert.assertTrue(treatmentHistory.contains("cisplatin"))
        Assert.assertTrue(treatmentHistory.contains("nivolumab"))
        val otherOncologicalHistory = questionnaire.otherOncologicalHistory()
        Assert.assertEquals(1, otherOncologicalHistory!!.size.toLong())
        Assert.assertTrue(otherOncologicalHistory.contains("surgery"))
        Assert.assertNull(questionnaire.secondaryPrimaries())
        val nonOncologicalHistory = questionnaire.nonOncologicalHistory()
        Assert.assertEquals(1, nonOncologicalHistory!!.size.toLong())
        Assert.assertTrue(nonOncologicalHistory.contains("diabetes"))
        Assert.assertEquals(TumorStage.III, questionnaire.stage())
        Assert.assertTrue(questionnaire.hasMeasurableDisease()!!)
        Assert.assertNull(questionnaire.hasBrainLesions())
        Assert.assertNull(questionnaire.hasActiveBrainLesions())
        Assert.assertNull(questionnaire.hasCnsLesions())
        Assert.assertNull(questionnaire.hasActiveCnsLesions())
        Assert.assertFalse(questionnaire.hasBoneLesions()!!)
        Assert.assertFalse(questionnaire.hasLiverLesions()!!)
        val otherLesions = questionnaire.otherLesions()
        Assert.assertEquals(1, otherLesions!!.size.toLong())
        Assert.assertTrue(otherLesions.contains("pulmonal"))
        Assert.assertNull(questionnaire.ihcTestResults())
        Assert.assertNull(questionnaire.pdl1TestResults())
        Assert.assertEquals(0, (questionnaire.whoStatus() as Int).toLong())
        Assert.assertNull(questionnaire.unresolvedToxicities())
        val infectionStatus = questionnaire.infectionStatus()
        Assert.assertNotNull(infectionStatus)
        Assert.assertFalse(infectionStatus!!.hasActiveInfection())
        val ecg = questionnaire.ecg()
        Assert.assertNotNull(ecg)
        Assert.assertTrue(ecg!!.hasSigAberrationLatestECG())
        Assert.assertEquals("Sinus", ecg.aberrationDescription())
        val complications = questionnaire.complications()
        Assert.assertEquals(1, complications!!.size.toLong())
        Assert.assertTrue(complications.contains("nausea"))
        Assert.assertNull(questionnaire.genayaSubjectNumber())
    }

    @Test
    fun shouldBeAbleToExtractDataFromQuestionnaireV1_0() {
        val questionnaire = extraction().extract(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV1_0()))
        Assert.assertEquals(LocalDate.of(2020, 8, 28), questionnaire!!.date())
        Assert.assertEquals("lung", questionnaire.tumorLocation())
        Assert.assertEquals("small-cell carcinoma", questionnaire.tumorType())
        Assert.assertEquals("Liver", questionnaire.biopsyLocation())
        val treatmentHistory = questionnaire.treatmentHistoryCurrentTumor()
        Assert.assertEquals(1, treatmentHistory!!.size.toLong())
        Assert.assertTrue(treatmentHistory.contains("capecitabine JAN 2020- JUL 2021"))
        val otherOncologicalHistory = questionnaire.otherOncologicalHistory()
        Assert.assertEquals(1, otherOncologicalHistory!!.size.toLong())
        Assert.assertTrue(otherOncologicalHistory.contains("surgery JUN 2021"))
        Assert.assertNull(questionnaire.secondaryPrimaries())
        val nonOncologicalHistory = questionnaire.nonOncologicalHistory()
        Assert.assertEquals(1, nonOncologicalHistory!!.size.toLong())
        Assert.assertTrue(nonOncologicalHistory.contains("NO"))
        Assert.assertEquals(TumorStage.IV, questionnaire.stage())
        Assert.assertTrue(questionnaire.hasMeasurableDisease()!!)
        Assert.assertNull(questionnaire.hasBrainLesions())
        Assert.assertNull(questionnaire.hasActiveBrainLesions())
        Assert.assertFalse(questionnaire.hasCnsLesions()!!)
        Assert.assertNull(questionnaire.hasActiveCnsLesions())
        Assert.assertFalse(questionnaire.hasBoneLesions()!!)
        Assert.assertFalse(questionnaire.hasLiverLesions()!!)
        val otherLesions = questionnaire.otherLesions()
        Assert.assertEquals(3, otherLesions!!.size.toLong())
        Assert.assertTrue(otherLesions.contains("peritoneal"))
        Assert.assertTrue(otherLesions.contains("lymph nodes"))
        Assert.assertTrue(otherLesions.contains("lung"))
        Assert.assertNull(questionnaire.ihcTestResults())
        Assert.assertNull(questionnaire.pdl1TestResults())
        Assert.assertEquals(1, (questionnaire.whoStatus() as Int).toLong())
        val unresolvedToxicities = questionnaire.unresolvedToxicities()
        Assert.assertEquals(1, unresolvedToxicities!!.size.toLong())
        Assert.assertTrue(unresolvedToxicities.contains("NA"))
        val infectionStatus = questionnaire.infectionStatus()
        Assert.assertNotNull(infectionStatus)
        Assert.assertFalse(infectionStatus!!.hasActiveInfection())
        Assert.assertNull(questionnaire.ecg())
        val complications = questionnaire.complications()
        Assert.assertEquals(1, complications!!.size.toLong())
        Assert.assertTrue(complications.contains("ascites"))
        Assert.assertNull(questionnaire.genayaSubjectNumber())
    }

    @Test
    fun shouldBeAbleToExtractDataFromQuestionnaireV0_2() {
        val questionnaire = extraction().extract(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV0_2()))
        Assert.assertEquals(LocalDate.of(2020, 8, 28), questionnaire!!.date())
        Assert.assertEquals("cholangio", questionnaire.tumorLocation())
        Assert.assertEquals("carcinoma", questionnaire.tumorType())
        Assert.assertEquals("liver", questionnaire.biopsyLocation())
        val treatmentHistory = questionnaire.treatmentHistoryCurrentTumor()
        Assert.assertEquals(1, treatmentHistory!!.size.toLong())
        Assert.assertTrue(treatmentHistory.contains("capecitabine"))
        val otherOncologicalHistory = questionnaire.otherOncologicalHistory()
        Assert.assertEquals(1, otherOncologicalHistory!!.size.toLong())
        Assert.assertTrue(otherOncologicalHistory.contains("radiotherapy"))
        Assert.assertNull(questionnaire.secondaryPrimaries())
        val nonOncologicalHistory = questionnaire.nonOncologicalHistory()
        Assert.assertEquals(1, nonOncologicalHistory!!.size.toLong())
        Assert.assertTrue(nonOncologicalHistory.contains("NA"))
        Assert.assertEquals(TumorStage.IV, questionnaire.stage())
        Assert.assertTrue(questionnaire.hasMeasurableDisease()!!)
        Assert.assertNull(questionnaire.hasBrainLesions())
        Assert.assertNull(questionnaire.hasActiveBrainLesions())
        Assert.assertNull(questionnaire.hasCnsLesions())
        Assert.assertNull(questionnaire.hasActiveCnsLesions())
        Assert.assertFalse(questionnaire.hasBoneLesions()!!)
        Assert.assertFalse(questionnaire.hasLiverLesions()!!)
        Assert.assertNull(questionnaire.otherLesions())
        Assert.assertNull(questionnaire.ihcTestResults())
        Assert.assertNull(questionnaire.pdl1TestResults())
        Assert.assertEquals(2, (questionnaire.whoStatus() as Int).toLong())
        Assert.assertNull(questionnaire.unresolvedToxicities())
        val infectionStatus = questionnaire.infectionStatus()
        Assert.assertNotNull(infectionStatus)
        Assert.assertFalse(infectionStatus!!.hasActiveInfection())
        Assert.assertNull(questionnaire.ecg())
        val complications = questionnaire.complications()
        Assert.assertEquals(1, complications!!.size.toLong())
        Assert.assertTrue(complications.contains("pleural effusion"))
        Assert.assertNull(questionnaire.genayaSubjectNumber())
    }

    @Test
    fun shouldBeAbleToExtractDataFromQuestionnaireV0_1() {
        val questionnaire = extraction().extract(entry(TestQuestionnaireFactory.createTestQuestionnaireValueV0_1()))
        Assert.assertEquals(LocalDate.of(2020, 8, 28), questionnaire!!.date())
        Assert.assertEquals("Cholangiocarcinoom (lever, lymph retroperitoneaal)", questionnaire.tumorLocation())
        Assert.assertEquals("Unknown", questionnaire.tumorType())
        Assert.assertNull(questionnaire.biopsyLocation())
        Assert.assertNull(questionnaire.treatmentHistoryCurrentTumor())
        Assert.assertNull(questionnaire.otherOncologicalHistory())
        Assert.assertNull(questionnaire.secondaryPrimaries())
        val nonOncologicalHistory = questionnaire.nonOncologicalHistory()
        Assert.assertEquals(1, nonOncologicalHistory!!.size.toLong())
        Assert.assertTrue(nonOncologicalHistory.contains("Diabetes Mellitus type 2"))
        Assert.assertNull(questionnaire.stage())
        Assert.assertTrue(questionnaire.hasMeasurableDisease()!!)
        Assert.assertNull(questionnaire.hasBrainLesions())
        Assert.assertNull(questionnaire.hasActiveBrainLesions())
        Assert.assertNull(questionnaire.hasCnsLesions())
        Assert.assertNull(questionnaire.hasActiveCnsLesions())
        Assert.assertTrue(questionnaire.hasBoneLesions()!!)
        Assert.assertTrue(questionnaire.hasLiverLesions()!!)
        val otherLesions = questionnaire.otherLesions()
        Assert.assertEquals(2, otherLesions!!.size.toLong())
        Assert.assertTrue(otherLesions.contains("lever"))
        Assert.assertTrue(otherLesions.contains("lymph retroperitoneaal"))
        Assert.assertNull(questionnaire.ihcTestResults())
        Assert.assertNull(questionnaire.pdl1TestResults())
        Assert.assertEquals(1, (questionnaire.whoStatus() as Int).toLong())
        val unresolvedToxicities = questionnaire.unresolvedToxicities()
        Assert.assertEquals(1, unresolvedToxicities!!.size.toLong())
        Assert.assertTrue(unresolvedToxicities.contains("Neuropathy GR3"))
        val infectionStatus = questionnaire.infectionStatus()
        Assert.assertNotNull(infectionStatus)
        Assert.assertFalse(infectionStatus!!.hasActiveInfection())
        val ecg = questionnaire.ecg()
        Assert.assertNotNull(ecg)
        Assert.assertFalse(ecg!!.hasSigAberrationLatestECG())
        Assert.assertEquals("No", ecg.aberrationDescription())
        Assert.assertNull(questionnaire.complications())
        Assert.assertNull(questionnaire.genayaSubjectNumber())
    }

    @Test
    fun canExtractFromMissingOrInvalidEntry() {
        Assert.assertNull(extraction().extract(null))
        Assert.assertNull(extraction().extract(entry("Does not exist")))
    }

    private fun extraction(): QuestionnaireExtraction {
        return QuestionnaireExtraction(QuestionnaireRawEntryMapper(emptyMap()))
    }

    companion object {
        private fun entry(questionnaire: String): QuestionnaireEntry {
            return ImmutableQuestionnaireEntry.builder()
                .from(TestQuestionnaireFactory.createTestQuestionnaireEntry())
                .text(questionnaire)
                .build()
        }
    }
}